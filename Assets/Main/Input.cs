//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Main/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""SwordControl"",
            ""id"": ""77dc07a0-8f2c-4c71-96b7-fab8b9c413cc"",
            ""actions"": [
                {
                    ""name"": ""DeltaTouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f88195c5-e8af-45c5-adfd-fef48b7b952d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch&Drag"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5ea76eeb-29b5-4820-90d7-efc941b5c14d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cf671ca0-7aa6-4d3a-92dc-3541a347a259"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeltaTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34bf8562-a871-4933-9c8b-a864c637175b"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch&Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TomagawkControl"",
            ""id"": ""fe9f2cc9-83a5-49a7-8f33-2fe45adfa5d1"",
            ""actions"": [
                {
                    ""name"": ""Touched"",
                    ""type"": ""Value"",
                    ""id"": ""8871e2ad-82f6-4b18-9278-31acd7fe2063"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e3207ef-0891-43ca-b1ef-4d4f7e2b7df4"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": ""Tap(duration=0.5,pressPoint=0.7)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touched"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SwordControl
        m_SwordControl = asset.FindActionMap("SwordControl", throwIfNotFound: true);
        m_SwordControl_DeltaTouch = m_SwordControl.FindAction("DeltaTouch", throwIfNotFound: true);
        m_SwordControl_TouchDrag = m_SwordControl.FindAction("Touch&Drag", throwIfNotFound: true);
        // TomagawkControl
        m_TomagawkControl = asset.FindActionMap("TomagawkControl", throwIfNotFound: true);
        m_TomagawkControl_Touched = m_TomagawkControl.FindAction("Touched", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SwordControl
    private readonly InputActionMap m_SwordControl;
    private ISwordControlActions m_SwordControlActionsCallbackInterface;
    private readonly InputAction m_SwordControl_DeltaTouch;
    private readonly InputAction m_SwordControl_TouchDrag;
    public struct SwordControlActions
    {
        private @TouchControls m_Wrapper;
        public SwordControlActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DeltaTouch => m_Wrapper.m_SwordControl_DeltaTouch;
        public InputAction @TouchDrag => m_Wrapper.m_SwordControl_TouchDrag;
        public InputActionMap Get() { return m_Wrapper.m_SwordControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwordControlActions set) { return set.Get(); }
        public void SetCallbacks(ISwordControlActions instance)
        {
            if (m_Wrapper.m_SwordControlActionsCallbackInterface != null)
            {
                @DeltaTouch.started -= m_Wrapper.m_SwordControlActionsCallbackInterface.OnDeltaTouch;
                @DeltaTouch.performed -= m_Wrapper.m_SwordControlActionsCallbackInterface.OnDeltaTouch;
                @DeltaTouch.canceled -= m_Wrapper.m_SwordControlActionsCallbackInterface.OnDeltaTouch;
                @TouchDrag.started -= m_Wrapper.m_SwordControlActionsCallbackInterface.OnTouchDrag;
                @TouchDrag.performed -= m_Wrapper.m_SwordControlActionsCallbackInterface.OnTouchDrag;
                @TouchDrag.canceled -= m_Wrapper.m_SwordControlActionsCallbackInterface.OnTouchDrag;
            }
            m_Wrapper.m_SwordControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DeltaTouch.started += instance.OnDeltaTouch;
                @DeltaTouch.performed += instance.OnDeltaTouch;
                @DeltaTouch.canceled += instance.OnDeltaTouch;
                @TouchDrag.started += instance.OnTouchDrag;
                @TouchDrag.performed += instance.OnTouchDrag;
                @TouchDrag.canceled += instance.OnTouchDrag;
            }
        }
    }
    public SwordControlActions @SwordControl => new SwordControlActions(this);

    // TomagawkControl
    private readonly InputActionMap m_TomagawkControl;
    private ITomagawkControlActions m_TomagawkControlActionsCallbackInterface;
    private readonly InputAction m_TomagawkControl_Touched;
    public struct TomagawkControlActions
    {
        private @TouchControls m_Wrapper;
        public TomagawkControlActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touched => m_Wrapper.m_TomagawkControl_Touched;
        public InputActionMap Get() { return m_Wrapper.m_TomagawkControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TomagawkControlActions set) { return set.Get(); }
        public void SetCallbacks(ITomagawkControlActions instance)
        {
            if (m_Wrapper.m_TomagawkControlActionsCallbackInterface != null)
            {
                @Touched.started -= m_Wrapper.m_TomagawkControlActionsCallbackInterface.OnTouched;
                @Touched.performed -= m_Wrapper.m_TomagawkControlActionsCallbackInterface.OnTouched;
                @Touched.canceled -= m_Wrapper.m_TomagawkControlActionsCallbackInterface.OnTouched;
            }
            m_Wrapper.m_TomagawkControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Touched.started += instance.OnTouched;
                @Touched.performed += instance.OnTouched;
                @Touched.canceled += instance.OnTouched;
            }
        }
    }
    public TomagawkControlActions @TomagawkControl => new TomagawkControlActions(this);
    public interface ISwordControlActions
    {
        void OnDeltaTouch(InputAction.CallbackContext context);
        void OnTouchDrag(InputAction.CallbackContext context);
    }
    public interface ITomagawkControlActions
    {
        void OnTouched(InputAction.CallbackContext context);
    }
}
